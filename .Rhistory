knitr::opts_chunk$set(echo = TRUE)
library(readr)
df <- read_csv("Women_Prestige_Data.csv")
head(df)
# Checking data type:
str(df)
# Data distribution:
library(purrr)
library(tidyr)
library(ggplot2)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
knitr::opts_chunk$set(echo = TRUE)
# Data distribution:
library(purrr)
library(tidyr)
library(ggplot2)
install.packages(c("backports", "blob", "broom", "checkmate", "chron", "cli", "clipr", "colorspace", "cpp11", "crosstable", "DBI", "dbplyr", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "flextable", "fs", "gdata", "gdtools", "generics", "ggplot2", "gmodels", "gtools", "haven", "httr", "knitr", "magrittr", "memoise", "officer", "openssl", "plyr", "processx", "ps", "Rcpp", "readr", "readxl", "rlang", "rmarkdown", "RSQLite", "stringi", "systemfonts", "tibble", "tidyr", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "vroom", "xfun", "xml2"))
install.packages(c("backports", "blob", "broom", "checkmate", "chron", "cli", "clipr", "colorspace", "cpp11", "crosstable", "DBI", "dbplyr", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "flextable", "fs", "gdata", "gdtools", "generics", "ggplot2", "gmodels", "gtools", "haven", "httr", "knitr", "magrittr", "memoise", "officer", "openssl", "plyr", "processx", "ps", "Rcpp", "readr", "readxl", "rlang", "rmarkdown", "RSQLite", "stringi", "systemfonts", "tibble", "tidyr", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "vroom", "xfun", "xml2"))
install.packages(c("backports", "blob", "broom", "checkmate", "chron", "cli", "clipr", "colorspace", "cpp11", "crosstable", "DBI", "dbplyr", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "flextable", "fs", "gdata", "gdtools", "generics", "ggplot2", "gmodels", "gtools", "haven", "httr", "knitr", "magrittr", "memoise", "officer", "openssl", "plyr", "processx", "ps", "Rcpp", "readr", "readxl", "rlang", "rmarkdown", "RSQLite", "stringi", "systemfonts", "tibble", "tidyr", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "vroom", "xfun", "xml2"))
setwd("C:/Users/jpndu/Class/Prestige-Rating")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
df <- read_csv("Women_Prestige_Data.csv")
head(df)
# Checking data type:
str(df)
# Data distribution:
library(purrr)
library(tidyr)
library(ggplot2)
par(mfrow= c(3, 3))
df %>%
keep(is.numeric) %>% subset(select=-c(census))%>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(aes(y = ..count..), bins=12, fill = "grey") +
stat_function(fun = dnorm)
# Graphs to check data distribution:
# Create a function that helps create graphs:
histDenNorm <- function (x, main = "") {
hist(x, prob = TRUE, main = main) # Histogram
lines(density(x), col = "blue", lwd = 2) # Density
x2 <- seq(min(x), max(x), length = 40)
f <- dnorm(x2, mean(x), sd(x))
lines(x2, f, col = "red", lwd = 2) # Normal
legend("topright", c("Density", "Normal"), box.lty = 3,
lty = 3, col = c("blue", "red"), lwd = c(1, 2, 2))
}
png(file="images/R graphs.png",
width=600, height=350)
x <- df$education
y <- df$income
z <- df$women
v <- df$prestige
par(mfrow= c(2,2))
histDenNorm(x, main = "education")
histDenNorm(y, main = "income")
histDenNorm(z, main = "women")
histDenNorm(v, main = "prestige")
dev.off()
# Correlation heatmap:
library(psych)
png(file="images/R heatmap.png",
width=600, height=350)
df1 <- subset(df, select=-c(census, occupation_name, type))
corPlot(df1, cex = 1.2, numbers=TRUE,stars=TRUE)
dev.off()
library(cowplot)
library(ggplot2)
plot_income <- ggplot(data = df, aes(x = prestige, y = income, col = type)) + geom_point() + geom_smooth(method='lm')
plot_education <- ggplot(data = df, aes(x = prestige, y = education, col = type)) + geom_point() + geom_smooth(method='lm')
plot_women <- ggplot(data = df, aes(x = prestige, y = women, col = type)) + geom_point() + geom_smooth(method='lm')
plot_census <- ggplot(data = df, aes(x = prestige, y = census, col = type)) + geom_point() + geom_smooth(method='lm')
plot_grid(plot_income, plot_education, plot_women, plot_census, labels = "AUTO")
########################################
# Correlation heatmap:                 #
########################################
library(psych)
df1 <- subset(df, select=-c(census, occupation_name, type))
corPlot(df1, cex = 1.2, numbers=TRUE,stars=TRUE)
########################################
# Simple Linear Regression: Predict    #
# Prestige with Education              #
########################################
model <- lm(prestige ~ education, data = df1)
summary(model)
########################################
# diagnostic plots: Model                   #
########################################
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(model)
########################################
# Transform education to center the     #
# values to its mean                   #
########################################
# Center `education` on its mean
education_centered <-  scale(df1$education, center = TRUE, scale = FALSE)
# Modeling
model1 <- lm(prestige ~ education_centered, data = df1)
summary(model1)
################################################################
# Checking the modal fit: 1. Plotting the fitted               #
################################################################
ggplot(df1, aes(x = education_centered, y = prestige)) +
geom_point() +
stat_smooth(method = "lm", col = "indianred") +
scale_y_continuous(breaks = seq(1000, 25000, by = 2000), minor_breaks = NULL)
################################################################
# Checking the model fit: 2. Plotting the fitted vs residuals  #
################################################################
plot(model1, which = 1, pch = 16)
########################################
# diagnostic plots: Model1                    #
########################################
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(model1)
########################################
# Multiple linear regression           #
########################################
# Center all predictors on their means
education_centered  = scale(df1$education, center = TRUE, scale = FALSE)
income_centered  = scale(df1$income, center = TRUE, scale = FALSE)
women_centered  = scale(df1$women, center = TRUE, scale = FALSE)
# Bind the new variables into a dataframe
centered_predictors <- cbind(education_centered , income_centered , women_centered )
df2 <- cbind(df1, centered_predictors)
names(df2)[5:7] = c("education_centered ", "income_centered ", "women_centered" )
summary(df2)
# Fit a linear model and run a summary of its results
model2 <- lm(prestige ~ education_centered + income_centered + women_centered, data = df2)
summary(model2)
model3 <- lm(prestige ~ education_centered + income_centered, data = df2)
summary(model3)
################################################################
# Comparing the models using ANOVA: Not significantly different #
################################################################
anova(model1, model2, model3, test=c("Chisq"))
###############################################################
# Comparing Models Using AIC                                  #
###############################################################
library(AICcmodavg)
model.set <- list(model1, model2, model3)
model.names <- c("model1", "model2", "model3")
aictab(model.set, modnames = model.names)
########################################
# Model Visualization                  #
########################################
library(tidyverse)
library(tidyverse)
devtools::install_github("tidyverse/tidyverse")
install.packages("devtools")
library(devtools)
devtools::install_github("tidyverse/tidyverse")
devtools::install_github("tidyverse/tidyverse")
library(tidyverse)
install.packages("cli")
library(tidyverse)
library(tidyverse)
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(tidyverse)
